Import("ENV")


from fbt.appmanifest import FlipperAppType
import pathlib


appenv = ENV.Clone(tools=["fbt_extapps"])

appenv.Replace(
    LINKER_SCRIPT="application-ext",
)

appenv.AppendUnique(
    CCFLAGS=[
        # "-Os",
        # "-Og",
        "-ggdb3",
        "-mword-relocations",
        "-mlong-calls",
        "-fno-common",
        "-nostdlib",
        "-fvisibility=hidden",
    ],
    LINKFLAGS=[
        "-r",
        # "-Bsymbolic",
        "-nostartfiles",
        "-mlong-calls",
        "-fno-common",
        "-nostdlib",
        "-Wl,--gc-sections",
        "-Wl,--no-export-dynamic",
        "-fvisibility=hidden",
        "-Wl,-e${APP_ENTRY}",
        "-Xlinker",
        "-Map=${TARGET}.map",
    ],
)


extapps = {"compact": {}, "debug": {}, "validators": {}}


def build_app_as_external(env, appdef):
    compact_elf, debug_elf, validator = env.BuildAppElf(appdef)
    extapps["compact"][appdef.appid] = compact_elf
    extapps["debug"][appdef.appid] = debug_elf
    extapps["validators"][appdef.appid] = validator


for apptype in (
    FlipperAppType.PLUGIN,
    FlipperAppType.EXTERNAL,
    # FlipperAppType.DEBUG,
):
    for app in appenv["APPBUILD"].get_apps_of_type(apptype, True):
        build_app_as_external(appenv, app)

# Ugly access to global option
if extra_app_list := GetOption("extra_ext_apps"):
    for extra_app in extra_app_list.split(","):
        build_app_as_external(appenv, appenv["APPMGR"].get(extra_app))


if appenv["FORCE"]:
    appenv.AlwaysBuild(extapps["compact"].values())

Alias(appenv["FIRMWARE_BUILD_CFG"] + "_extapps", extapps["compact"].values())


def launch_ext_app_for_srcdir(target, source, env, for_signature):
    if for_signature:
        return ""

    app_dir = env.subst("$APPSRC")
    if not app_dir:
        raise Exception("APPSRC not set")

    appmgr = appenv["APPMGR"]

    app = None
    for dir_part in reversed(pathlib.Path(app_dir).parts):
        if app := appmgr.find_by_appdir(dir_part):
            break
    if not app:
        raise Exception(f"Failed to resolve application for given APPSRC={app_dir}")

    app_elf = extapps["compact"].get(app.appid, None)
    if not app_elf:
        raise Exception(f"No external app found for {app.appid}")

    return "${PYTHON3} scripts/runfap.py " + app_elf[0].path


appenv.PhonyTarget(
    "launch_app",
    # "echo magic for ${APPSRC}",
    Action(launch_ext_app_for_srcdir, generator=1),
)

Return("extapps")
