name: 'CI'

on: push

env:
  TARGETS: f6

jobs:
  build:
    runs-on: [self-hosted]
    steps:
      - name: Cleanup workspace
        uses: AutoModality/action-clean@v1

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Checkout submodules
        run: git submodule update --init --recursive
      - name: Checkout submodules
        run: git submodule sync

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: docker-cache-${{ hashFiles('docker/**') }}-{hash}
          restore-keys: docker-cache-${{ hashFiles('docker/**') }}-
      - name: Build docker image
        uses: ./.github/actions/docker

      - name: Check syntax
        uses: ./.github/actions/docker
        continue-on-error: false
        with:
          run: /syntax_check.sh

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      - name: Save current date
        run: echo ${{ steps.date.outputs.date }} > date.txt

      - name: Get branch name
        id: branch
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF##*/})"

      - name: Build bootloader in docker
        uses: ./.github/actions/docker
        with:
          run: for TARGET in ${TARGETS}; do make -j$(nproc) -C bootloader TARGET=${TARGET}; done

      - name: Generate dfu file for bootloader
        uses: ./.github/actions/docker
        with:
          run: for TARGET in ${TARGETS}; do hex2dfu -i bootloader/.obj/${TARGET}/bootloader.hex -o bootloader/.obj/${TARGET}/bootloader.dfu; done

      - name: Build firmware in docker
        uses: ./.github/actions/docker
        with:
          run: for TARGET in ${TARGETS}; do make -j$(nproc) -C firmware TARGET=${TARGET}; done

      - name: Generate dfu file for firmware
        uses: ./.github/actions/docker
        with:
          run: for TARGET in ${TARGETS}; do hex2dfu -i firmware/.obj/${TARGET}/firmware.hex -o firmware/.obj/${TARGET}/firmware.dfu; done

      - name: Generate full hex file
        uses: ./.github/actions/docker
        with:
          run: |
            for TARGET in ${TARGETS}; do
            srec_cat bootloader/.obj/${TARGET}/bootloader.hex -Intel firmware/.obj/${TARGET}/firmware.hex -Intel -o flipper-z-${TARGET}-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.hex -Intel
            done

      - name: Move upload files
        uses: ./.github/actions/docker
        with:
          run: |
            for TARGET in ${TARGETS}; do
            mv bootloader/.obj/${TARGET}/bootloader.dfu flipper-z-${TARGET}-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu
            mv bootloader/.obj/${TARGET}/bootloader.bin flipper-z-${TARGET}-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin
            mv bootloader/.obj/${TARGET}/bootloader.elf flipper-z-${TARGET}-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.elf
            mv firmware/.obj/${TARGET}/firmware.dfu flipper-z-${TARGET}-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu
            mv firmware/.obj/${TARGET}/firmware.bin flipper-z-${TARGET}-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin
            mv firmware/.obj/${TARGET}/firmware.elf flipper-z-${TARGET}-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.elf
            done

      - name: Generate full dfu file
        uses: ./.github/actions/docker
        with:
          run: for TARGET in ${TARGETS}; do hex2dfu -i flipper-z-${TARGET}-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.hex -o flipper-z-${TARGET}-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu; done

      - name: Copy bootloader for full.bin 
        run: for TARGET in ${TARGETS}; do cp flipper-z-${TARGET}-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin flipper-z-${TARGET}-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin; done
      - name: Truncate full.bin 
        run: for TARGET in ${TARGETS}; do truncate -s 32768 flipper-z-${TARGET}-full-${{ steps.branch.outputs.branch }}{{ steps.date.outputs.date }}.bin; done
      - name: Add firmware.bin at full.bin
        run: for TARGET in ${TARGETS}; do cat flipper-z-${TARGET}-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin >> flipper-z-${TARGET}-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin; done

      - name: Upload date
        uses: actions/upload-artifact@v2
        with:
          name: date
          path: date.txt

      - name: Publish artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            *-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu
            *-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin
            *-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.elf
            *-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu
            *-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin
            *-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.elf
            *-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu
            *-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin
          if-no-files-found: error
          retention-days: 7

  upload:
    name: Upload artifacts to external storage
    needs: build
    runs-on: [self-hosted]
    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: Download date
        uses: actions/download-artifact@v2
        with:
          name: date

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(cat date.txt)"

      - name: Get branch name
        id: branch
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF##*/})"        

      - name: Make empty dir
        run: mkdir -p empty

      - name: Clear upload dir
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -cvzr --delete
          path: empty/
          remote_path: "${{ secrets.RSYNC_DEPLOY_BASE_PATH }}${GITHUB_REF##*/}/"
          remote_host: ${{ secrets.RSYNC_DEPLOY_HOST }}
          remote_port: ${{ secrets.RSYNC_DEPLOY_PORT }}
          remote_user: ${{ secrets.RSYNC_DEPLOY_USER }}
          remote_key: ${{ secrets.RSYNC_DEPLOY_KEY }}

      - name: Generate files list
        run: |
              ls \
              *-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu \
              *-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin \
              *-bootloader-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.elf \
              *-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu \
              *-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin \
              *-firmware-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.elf \
              *-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.dfu \
              *-full-${{ steps.branch.outputs.branch }}${{ steps.date.outputs.date }}.bin > uploadlist.txt

      - name: Upload artifacts
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -cvzr --delete --files-from=uploadlist.txt
          remote_path: "${{ secrets.RSYNC_DEPLOY_BASE_PATH }}${GITHUB_REF##*/}/"
          remote_host: ${{ secrets.RSYNC_DEPLOY_HOST }}
          remote_port: ${{ secrets.RSYNC_DEPLOY_PORT }}
          remote_user: ${{ secrets.RSYNC_DEPLOY_USER }}
          remote_key: ${{ secrets.RSYNC_DEPLOY_KEY }}

      - name: Trigger reindex
        uses: wei/curl@master
        with:
          args: -X POST -F 'key=${{ secrets.REINDEX_KEY }}' ${{ secrets.REINDEX_URL }}

