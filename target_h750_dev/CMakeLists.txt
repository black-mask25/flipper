# version
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_VERSION 1)
cmake_minimum_required(VERSION 3.7)

# specify cross compilers and tools
set(TOOLCHAIN_BIN_PATH "E:/work/projects/cmake-stm32/arm_toolchain/xpack-arm-none-eabi-gcc-9.2.1-1.1/bin/")
set(OPENOCD_PATH "E:/work/projects/cmake-stm32/arm_toolchain/GNU MCU Eclipse/OpenOCD/0.10.0-12-20190422-2015")
set(STM32_TARGET_TRIPLET arm-none-eabi)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

find_program(CMAKE_C_COMPILER NAMES ${STM32_TARGET_TRIPLET}-gcc PATHS ${TOOLCHAIN_BIN_PATH})
find_program(CMAKE_CXX_COMPILER NAMES ${STM32_TARGET_TRIPLET}-g++ PATHS ${TOOLCHAIN_BIN_PATH})
find_program(CMAKE_ASM_COMPILER NAMES ${STM32_TARGET_TRIPLET}-gcc PATHS ${TOOLCHAIN_BIN_PATH})
find_program(CMAKE_AR NAMES ${STM32_TARGET_TRIPLET}-ar PATHS ${TOOLCHAIN_BIN_PATH})
find_program(CMAKE_OBJCOPY NAMES ${STM32_TARGET_TRIPLET}-objcopy PATHS ${TOOLCHAIN_BIN_PATH})
find_program(CMAKE_OBJDUMP NAMES ${STM32_TARGET_TRIPLET}-objdump PATHS ${TOOLCHAIN_BIN_PATH})
find_program(SIZE NAMES ${STM32_TARGET_TRIPLET}-size PATHS ${TOOLCHAIN_BIN_PATH})

# project start
PROJECT(STM32H750 C CXX ASM)

set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/_STM32H750VBTx_FLASH.ld)

# file(GLOB_RECURSE SOURCES "Drivers/STM32H7xx_HAL_Driver/*.c" "Src/*.c" "/startup_stm32h750xx.s")

# All relative to project root, as generated by STM32CubeMX.
set(SOURCE_DIR ${CMAKE_SOURCE_DIR})
set(CMSIS_DIR ${CMAKE_SOURCE_DIR}/Drivers/CMSIS)
set(DEVICE_DIR ${CMAKE_SOURCE_DIR}/Drivers/CMSIS/Device/ST/STM32H7xx)
set(HAL_DIR ${CMAKE_SOURCE_DIR}/Drivers/STM32H7xx_HAL_Driver)
set(MIDDLEWARE_DIR ${CMAKE_SOURCE_DIR}/Middlewares)

file(TOUCH_NOCREATE "Src/app/libs/version.h")

file(GLOB SOURCES 
  "startup_stm32h750xx.s"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pcd.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pcd_ex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_usb.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash_ex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hsem.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma_ex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c_ex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_exti.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_sdmmc.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_ll_delayblock.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_sd_ex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim_ex.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c"
  "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart_ex.c"
  "Middlewares/Third_Party/FatFs/src/diskio.c"
  "Middlewares/Third_Party/FatFs/src/ff.c"
  "Middlewares/Third_Party/FatFs/src/ff_gen_drv.c"
  "Middlewares/Third_Party/FatFs/src/option/syscall.c"
  "Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c"
  "Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c"
  "Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c"
  "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c"

  "Src/freertos.c"
  "Middlewares/Third_Party/FreeRTOS/Source/croutine.c"
  "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
  "Middlewares/Third_Party/FreeRTOS/Source/list.c"
  "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
  "Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c"
  "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
  "Middlewares/Third_Party/FreeRTOS/Source/timers.c"
  "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c"
  "Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c"
  "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
  "Middlewares/Third_Party/FatFs/src/option/ccsbcs.c"

  "Src/bsp_driver_sd.c"
  "Src/sd_diskio.c"
  "Src/fatfs.c"
  "Src/usb_device.c"
  "Src/usbd_conf.c"
  "Src/usbd_desc.c"
  "Src/usbd_cdc_if.c"
  "Src/stm32h7xx_it.c"
  "Src/stm32h7xx_hal_msp.c"
  "Src/system_stm32h7xx.c"

  "Src/app/*.cpp"
  "Src/app/*.c"
  "Src/app/libs/*.cpp"
  "Src/app/libs/*.c"

  "Src/app/drivers/*.cpp"
  "Src/app/drivers/*.c"

  "../core/furi.c"
  "../core/furi_ac.c"

  "Src/main.c"
  )


# Look here for header files.
include_directories(${SOURCE_DIR})
include_directories(${SOURCE_DIR}/Inc)
include_directories(${CMSIS_DIR}/Include)
include_directories(${DEVICE_DIR}/Include)
include_directories(${HAL_DIR}/Inc)
include_directories(${HAL_DIR}/Inc/Legacy)

include_directories(${MIDDLEWARE_DIR}/Third_Party/FatFs/src)
include_directories(${MIDDLEWARE_DIR}/ST/STM32_USB_Device_Library/Core/Inc)
include_directories(${MIDDLEWARE_DIR}/ST/STM32_USB_Device_Library/Class/CDC/Inc)

include_directories(${MIDDLEWARE_DIR}/Third_Party/FreeRTOS/Source/include)
include_directories(${MIDDLEWARE_DIR}/Third_Party/FreeRTOS/Source/CMSIS_RTOS)
include_directories(${MIDDLEWARE_DIR}/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F)

add_executable(${PROJECT_NAME}.elf ${SOURCES} ${LINKER_SCRIPT})

target_compile_options(${PROJECT_NAME}.elf PRIVATE 
  -mcpu=cortex-m7
  -Os
  -g
  -ffunction-sections
  -fdata-sections
  -fstack-usage
  -fno-math-errno
  -MMD
  -MP
  --specs=nano.specs
  -mfpu=fpv5-d16
  -mfloat-abi=hard
  -mthumb
  $<$<COMPILE_LANGUAGE:C>:-std=gnu2x>
  $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++2a>
  $<$<COMPILE_LANGUAGE:CXX>:-fno-threadsafe-statics>
  $<$<COMPILE_LANGUAGE:CXX>:-fno-rtti>
  $<$<COMPILE_LANGUAGE:CXX>:-fno-use-cxa-atexit>
  $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>
  $<$<COMPILE_LANGUAGE:CXX>:-Wno-register>
)

target_link_options(${PROJECT_NAME}.elf PRIVATE 
  -mcpu=cortex-m7
  -T ${LINKER_SCRIPT}
  --specs=nosys.specs
  -Wl,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map
  -Wl,--gc-sections -static
  --specs=nano.specs
  -mfpu=fpv5-d16 
  -mfloat-abi=hard 
  -mthumb 
  -fno-math-errno
  -Wl,--start-group -lstdc++ -lsupc++ 
  -Wl,--end-group
  -Wl,--print-memory-usage -T ${LINKER_SCRIPT} 
)

target_compile_definitions(${PROJECT_NAME}.elf PRIVATE 
  USE_HAL_DRIVER
  STM32H750xx
)

set(HEX_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.hex)
set(BIN_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.bin)

# Make binary file.
add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD
  COMMAND ${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}
  COMMAND ${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}
  COMMENT "Building ${HEX_FILE}
Building ${BIN_FILE}")

# Generate assembly listing.
add_custom_command(
  TARGET ${PROJECT_NAME}.elf
  COMMAND rm ${PROJECT_NAME}.lst -f
  COMMAND ${CMAKE_OBJDUMP}
  ARGS "-S" "${PROJECT_NAME}.elf" ">>" "${PROJECT_NAME}.lst")

# Flash firmware to target.
add_custom_target(flash
  ${OPENOCD_PATH}/bin/openocd -f interface/stlink-v2.cfg -c "transport select hla_swd"
  -f ${CMAKE_SOURCE_DIR}/stm32h7x.cfg -c "init" -c "reset halt"
  -c "flash write_image erase ${PROJECT_NAME}.elf" -c "reset run" -c "shutdown"
  DEPENDS ${PROJECT_NAME}.elf
  COMMENT "Flashing target hardware")

# Run OpenOCD as a GDB host.
add_custom_target(gdbhost
  ${OPENOCD_PATH}/bin/openocd.exe -f interface/stlink-v2.cfg -c "transport select hla_swd"
  -f ${CMAKE_SOURCE_DIR}/stm32h7x.cfg -c "init" -c "reset halt"
  DEPENDS ${PROJECT_NAME}.elf
  COMMENT "Running OpenOCD as a GDB host.")
